import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
import imageio
import argparse
import numpy as np
import os
import math
from skimage.transform import resize

import audio_utilities

def rgb2gray(rgb):
    return np.dot(rgb[...,:3], [0.299, 0.587, 0.114])

parser = argparse.ArgumentParser()
parser.add_argument('--in_file', type=str, required=True,
                    help='has to be bw')
parser.add_argument('--param_file', type=str, required=True,
                    help='parameters generated by build-melspec-from-wav')
parser.add_argument('--out_file', type=str, required=True,
                    help='Output wav')
parser.add_argument('--remove_blank', action='store_true',
                    help='remove trailing blank')
parser.add_argument('--iterations', default=300, type=int,
                    help='Number of iterations to run the algorithm')

args = parser.parse_args()

in_file = args.in_file
with open(args.param_file, "r") as f:
    scale_mel = float(f.readline())
    hopsamp = int(f.readline())
    min_freq_hz = int(f.readline())
    max_freq_hz = int(f.readline())
    mel_bin_count = int(f.readline())
    fft_size = int(f.readline())
    sample_rate_hz = int(f.readline())

out_file = args.out_file

linear_bin_count = 1 + fft_size//2
filterbank = audio_utilities.make_mel_filterbank(min_freq_hz, max_freq_hz, mel_bin_count,
                                                 linear_bin_count , sample_rate_hz)

# Load spectogram file

spectrogram = imageio.imread(in_file)

if np.ndim(spectrogram) == 2:
    # gray
    mel_spectrogram=(1-spectrogram/65535.)
else:
    # color
    mel_spectrogram=rgb2gray(spectrogram/255.)

mel_spectrogram = np.flip(mel_spectrogram, 0)
mel_spectrogram /= scale_mel
mel_spectrogram = np.exp(mel_spectrogram/20.*np.log(10))*10e-6

inverted_mel_to_linear_freq_spectrogram = np.dot(filterbank.T, mel_spectrogram)

stft_modified = inverted_mel_to_linear_freq_spectrogram.T

stft_modified = stft_modified**0.5
# Use the Griffin&Lim algorithm to reconstruct an audio signal from the
# magnitude spectrogram.
x_reconstruct = audio_utilities.reconstruct_signal_griffin_lim(stft_modified,
                                                               fft_size, hopsamp,
                                                               args.iterations)

# The output signal must be in the range [-1, 1], otherwise we need to clip or normalize.
max_sample = np.max(abs(x_reconstruct))
if max_sample > 1.0:
    x_reconstruct = x_reconstruct / max_sample


max_amp = np.max(abs(x_reconstruct))
i = len(x_reconstruct) - 50
while np.mean(x_reconstruct[i:i+50]) < max_amp/100:
    i-=1
with open(args.out_file+".length", "w") as f:
    f.write("%f" % (i*1.0/sample_rate_hz))
if args.remove_blank:
    x_reconstruct = x_reconstruct[0:i+sample_rate_hz/3]

# Save the reconstructed signal to a WAV file.
audio_utilities.save_audio_to_file(x_reconstruct, sample_rate_hz, outfile=args.out_file)
